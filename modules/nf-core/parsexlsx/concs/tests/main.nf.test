// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test parsexlsx/samples
nextflow_process {

    name "Test Process PARSEXLSX_CONCS"
    script "../main.nf"
    process "PARSEXLSX_CONCS"

    tag "modules"
    tag "modules_nfcore"
    tag "parsexlsx"
    tag "parsexlsx/cons"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("parsexlsx - concs") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = file(params.test_data['generic']['xlsx']['test_xlsx'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
                { assert process.out.csv ==~ "control_case.csv" },
                { assert process.out.yml ==~ "combinationinfo.yml" },
                { assert snapshot(process.out.versions).match("prepfastq_concs") }
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("parsexlsx - concs - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:

                input[0] = file(params.test_data['generic']['xlsx']['test_xlsx'], checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                { assert process.out.csv ==~ "control_case.csv" },
                { assert process.out.yml ==~ "combinationinfo.yml" },
                { assert snapshot(process.out.versions).match("prepfastq_concs") }
            )
        }

    }

}
